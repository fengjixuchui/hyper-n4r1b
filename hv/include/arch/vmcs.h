#pragma once

// Taken from https://revers.engineering/day-3-multiprocessor-initialization-error-handling-the-vmcs/
#define VMCS_COMPONENT_ENCODING(Access, Index, Type, Width)  (UINT32) (( USHORT )(Access) | \
                                                            (( USHORT )(Index) << 1 ) | \
                                                            (( USHORT )(Type) << 10 ) | \
                                                            (( USHORT )(Width) << 13 ) )

#define VMCS_ENCODE_FULL(Index, Type, Width)    VMCS_COMPONENT_ENCODING(Full, Index, Type, Width)
#define VMCS_COMPONENT_16(Index, Type)		    VMCS_ENCODE_FULL(Index, Type, Word)
#define VMCS_COMPONENT_32(Index, Type)		    VMCS_ENCODE_FULL(Index, Type, DWord)
#define VMCS_COMPONENT_64_HIGH(Index, Type)	    VMCS_COMPONENT_ENCODING(High, Index, Type, QWord)
#define VMCS_COMPONENT_64_FULL(Index, Type)		VMCS_ENCODE_FULL(Index, Type, QWord)


typedef struct _VMCS
{
    union {
        UINT32 All;
        struct {
            UINT32 RevisionId : 31;
            UINT32 ShadowVmcsIndicator : 1;
        } Fields;
    } Header;

    UINT32 AbortIndicator;
    UINT8 Data[PAGE_SIZE - 8];
} VMCS, * PVMCS;

typedef enum _ENCODING_ACCESS_TYPE 
{
    Full = 0,
    High
} ENCODING_ACCESS_TYPE;

typedef enum _ENCODING_TYPE
{
    Control = 0,
    VmExitInfo,
    GuestState,
    HostState
} ENCODING_TYPE;

typedef enum _ENCODING_WIDTH
{
    Word = 0,
    QWord,
    DWord,
    Natural
} ENCODING_WIDTH;

// Intel manual - Appendix B: FIELD ENCODING IN VMCS 
typedef enum _VMCS_FIELDS 
{
    // *** 16-BITS FIELDS ***
    // 16-Bit Control Fields
    VIRTUAL_PROCESSOR_ID = VMCS_COMPONENT_16(0, Control), // VPID
    POSTED_INT_NOTIFICATION_VECTOR = VMCS_COMPONENT_16(1, Control),
    EPTP_INDEX = VMCS_COMPONENT_16(2, Control),

    // 16-Bit Guest-State Fields
    GUEST_ES_SELECTOR = VMCS_COMPONENT_16(0, GuestState),
    GUEST_CS_SELECTOR = VMCS_COMPONENT_16(1, GuestState),
    GUEST_SS_SELECTOR = VMCS_COMPONENT_16(2, GuestState),
    GUEST_DS_SELECTOR = VMCS_COMPONENT_16(3, GuestState),
    GUEST_FS_SELECTOR = VMCS_COMPONENT_16(4, GuestState),
    GUEST_GS_SELECTOR = VMCS_COMPONENT_16(5, GuestState),
    GUEST_LDTR_SELECTOR = VMCS_COMPONENT_16(6, GuestState),
    GUEST_TR_SELECTOR = VMCS_COMPONENT_16(7, GuestState),
    GUEST_INT_STATUS = VMCS_COMPONENT_16(8, GuestState),
    PML_INDEX = VMCS_COMPONENT_16(9, GuestState),

    // 16-Bit Host-State Fields
    HOST_ES_SELECTOR = VMCS_COMPONENT_16(0, HostState),
    HOST_CS_SELECTOR = VMCS_COMPONENT_16(1, HostState),
    HOST_SS_SELECTOR = VMCS_COMPONENT_16(2, HostState),
    HOST_DS_SELECTOR = VMCS_COMPONENT_16(3, HostState),
    HOST_FS_SELECTOR = VMCS_COMPONENT_16(4, HostState),
    HOST_GS_SELECTOR = VMCS_COMPONENT_16(5, HostState),
    HOST_TR_SELECTOR = VMCS_COMPONENT_16(6, HostState),

    // *** 32-BITS FIELDS ***
    // 32-Bit Control Fields
    PIN_BASED_VM_EXECUTION_CTLS = VMCS_COMPONENT_32(0, Control),
    PRIMARY_PROC_BASED_VM_EXECUTION_CTLS = VMCS_COMPONENT_32(1, Control),
    EXCEPTION_BITMAP = VMCS_COMPONENT_32(2, Control),
    PAGE_FAULT_ERR_CODE_MASK = VMCS_COMPONENT_32(3, Control),
    PAGE_FAULT_ERR_CODE_MATCH = VMCS_COMPONENT_32(4, Control),
    CR3_TARGET_COUNT = VMCS_COMPONENT_32(5, Control),
    VM_EXIT_CTLS = VMCS_COMPONENT_32(6, Control),
    VM_EXIT_MSR_STORE_COUNT = VMCS_COMPONENT_32(7, Control),
    VM_EXIT_MSR_LOAD_COUNT = VMCS_COMPONENT_32(8, Control),
    VM_ENTRY_CTLS = VMCS_COMPONENT_32(9, Control),
    VM_ENTRY_MSR_STORE_COUNT = VMCS_COMPONENT_32(10, Control),
    VM_ENTRY_INT_INFO_FIELD = VMCS_COMPONENT_32(11, Control),
    VM_ENTYR_EXCEPTION_ERR_CODE = VMCS_COMPONENT_32(12, Control),
    VM_ENTRY_INSTRUCTION_LEN = VMCS_COMPONENT_32(13, Control),
    TRT_THRESHOLD= VMCS_COMPONENT_32(14, Control),
    SECONDARY_PROC_BASED_VM_EXECUTION_CTLS = VMCS_COMPONENT_32(15, Control),
    PLE_GAP = VMCS_COMPONENT_32(16, Control),
    PLE_WINDOW = VMCS_COMPONENT_32(17, Control),

    // 32-Bit Read-Only Data Fields
    VM_INSTRUCTION_ERR = VMCS_COMPONENT_32(0, VmExitInfo),
    EXIT_REASON = VMCS_COMPONENT_32(1, VmExitInfo),
    VM_EXIT_INT_INFO = VMCS_COMPONENT_32(2, VmExitInfo),
    VM_EXIT_INT_ERR_CODE = VMCS_COMPONENT_32(3, VmExitInfo),
    IDT_VECTORING_INFO_FIELD = VMCS_COMPONENT_32(4, VmExitInfo),
    IDT_VECTORING_ERR_CODE = VMCS_COMPONENT_32(5, VmExitInfo),
    VM_EXIT_INSTRUCTION_LEN = VMCS_COMPONENT_32(6, VmExitInfo),
    VM_EXIT_INSTRUCTION_INFO = VMCS_COMPONENT_32(7, VmExitInfo),

    // 32-Bit Guest-State Fields
    GUEST_ES_LIMIT = VMCS_COMPONENT_32(0, GuestState),
    GUEST_CS_LIMIT = VMCS_COMPONENT_32(1, GuestState),
    GUEST_SS_LIMIT = VMCS_COMPONENT_32(2, GuestState),
    GUEST_DS_LIMIT = VMCS_COMPONENT_32(3, GuestState),
    GUEST_FS_LIMIT = VMCS_COMPONENT_32(4, GuestState),
    GUEST_GS_LIMIT = VMCS_COMPONENT_32(5, GuestState),
    GUEST_LDTR_LIMIT = VMCS_COMPONENT_32(6, GuestState),
    GUEST_TR_LIMIT = VMCS_COMPONENT_32(7, GuestState),
    GUEST_GDTR_LIMIT = VMCS_COMPONENT_32(8, GuestState),
    GUEST_IDTR_LIMIT = VMCS_COMPONENT_32(9, GuestState),
    GUEST_ES_ACCESS_RIGHTS = VMCS_COMPONENT_32(10, GuestState),
    GUEST_CS_ACCESS_RIGHTS = VMCS_COMPONENT_32(11, GuestState),
    GUEST_SS_ACCESS_RIGHTS = VMCS_COMPONENT_32(12, GuestState),
    GUEST_DS_ACCESS_RIGHTS = VMCS_COMPONENT_32(13, GuestState),
    GUEST_FS_ACCESS_RIGHTS = VMCS_COMPONENT_32(14, GuestState),
    GUEST_GS_ACCESS_RIGHTS = VMCS_COMPONENT_32(15, GuestState),
    GUEST_LDTR_ACCESS_RIGHTS = VMCS_COMPONENT_32(16, GuestState),
    GUEST_TR_ACCESS_RIGHTS = VMCS_COMPONENT_32(17, GuestState),
    GUEST_INTERRUPTIBILITY_STATE = VMCS_COMPONENT_32(18, GuestState),
    GUEST_ACTIVITY_STATE = VMCS_COMPONENT_32(19, GuestState),
    GUEST_SMBASE = VMCS_COMPONENT_32(20, GuestState),
    GUEST_IA32_SYSENTER_CS = VMCS_COMPONENT_32(21, GuestState),
    VMX_PREEMPTION_TIMER_VALUE = VMCS_COMPONENT_32(23, GuestState),

    // 32-Bit Host-State Field
    HOST_IA32_SYSENTER_CS = VMCS_COMPONENT_32(0, HostState),

    // *** 64-BITS FIELDS ***
    // 64-Bit Control Fields
    ADDR_IO_BITMAP_A = VMCS_COMPONENT_64_FULL(0, Control),
    ADDR_IO_BITMAP_A_HIGH = VMCS_COMPONENT_64_HIGH(0, Control),
    ADDR_IO_BITMAP_B = VMCS_COMPONENT_64_FULL(1, Control),
    ADDR_IO_BITMAP_B_HIGH = VMCS_COMPONENT_64_HIGH(1, Control),
    ADDR_MSR_BITMAPS = VMCS_COMPONENT_64_FULL(2, Control),
    ADDR_MSR_BITMAPS_HIGH = VMCS_COMPONENT_64_HIGH(2, Control),
    VM_EXIT_MSR_STORE_ADRR = VMCS_COMPONENT_64_FULL(3, Control),
    VM_EXIT_MSR_STORE_ADRR_HIGH = VMCS_COMPONENT_64_HIGH(3, Control),
    VM_EXIT_MSR_LOAD_ADDR = VMCS_COMPONENT_64_FULL(4, Control),
    VM_EXIT_MSR_LOAD_ADDR_HIGH = VMCS_COMPONENT_64_HIGH(4, Control),
    VM_ENTRY_MSR_LOAD_ADDR = VMCS_COMPONENT_64_FULL(5, Control),
    VM_ENTRY_MSR_LOAD_ADDR_HIGH = VMCS_COMPONENT_64_HIGH(5, Control),
    EXECUTIVE_VMCS_PTR = VMCS_COMPONENT_64_FULL(6, Control),
    EXECUTIVE_VMCS_PTR_HIGH = VMCS_COMPONENT_64_HIGH(6, Control),
    PML_ADDR = VMCS_COMPONENT_64_FULL(7, Control),
    PML_ADDR_HIGH = VMCS_COMPONENT_64_HIGH(7, Control),
    TSC_OFFSET = VMCS_COMPONENT_64_FULL(8, Control),
    TSC_OFFSET_HIGH = VMCS_COMPONENT_64_HIGH(8, Control),
    VIRTUAL_APIC_ADDR = VMCS_COMPONENT_64_FULL(9, Control),
    VIRTUAL_APIC_ADDR_HIGH = VMCS_COMPONENT_64_HIGH(9, Control),
    APIC_ACCESS_ADDR = VMCS_COMPONENT_64_FULL(10, Control),
    APIC_ACCESS_ADDR_HIGH = VMCS_COMPONENT_64_HIGH(10, Control),
    POSTED_INT_DESCRIPTOR_ADDR = VMCS_COMPONENT_64_FULL(11, Control),
    POSTED_INT_DESCRIPTOR_ADDR_HIGH = VMCS_COMPONENT_64_HIGH(11, Control),
    VM_FUNCTION_CTLS = VMCS_COMPONENT_64_FULL(12, Control),
    VM_FUNCTION_CTLS_HIGH = VMCS_COMPONENT_64_HIGH(12, Control),
    EPT_PTR = VMCS_COMPONENT_64_FULL(13, Control),
    EPT_PTR_HIGH = VMCS_COMPONENT_64_HIGH(13, Control),
    EOR_EXIT_BITMAP_0 = VMCS_COMPONENT_64_FULL(14, Control),
    EOR_EXIT_BITMAP_0_HIGH = VMCS_COMPONENT_64_HIGH(14, Control),
    EOR_EXIT_BITMAP_1 = VMCS_COMPONENT_64_FULL(15, Control),
    EOR_EXIT_BITMAP_1_HIGH = VMCS_COMPONENT_64_HIGH(15, Control),
    EOR_EXIT_BITMAP_2 = VMCS_COMPONENT_64_FULL(16, Control),
    EOR_EXIT_BITMAP_2_HIGH = VMCS_COMPONENT_64_HIGH(16, Control),
    EOR_EXIT_BITMAP_3 = VMCS_COMPONENT_64_FULL(17, Control),
    EOR_EXIT_BITMAP_3_HIGH = VMCS_COMPONENT_64_HIGH(17, Control),
    EPTP_LIST_ADDR = VMCS_COMPONENT_64_FULL(18, Control),
    EPTP_LIST_ADDR_HIGH = VMCS_COMPONENT_64_HIGH(18, Control),
    VMREAD_BITMAP_ADDR = VMCS_COMPONENT_64_FULL(19, Control),
    VMREAD_BITMAP_ADDR_HIGH = VMCS_COMPONENT_64_HIGH(19, Control),
    VMWRITE_BITMPA_ADDR = VMCS_COMPONENT_64_FULL(20, Control),
    VMWRITE_BITMPA_ADDR_HIGH = VMCS_COMPONENT_64_HIGH(20, Control),
    VIRTUALIZATION_EXCEPTION_INFO_ADDR = VMCS_COMPONENT_64_FULL(21, Control),
    VIRTUALIZATION_EXCEPTION_INFO_ADDR_HIGH = VMCS_COMPONENT_64_HIGH(21, Control),
    XSS_EXITING_BITMAP = VMCS_COMPONENT_64_FULL(22, Control),
    XSS_EXITING_BITMAP_HIGH = VMCS_COMPONENT_64_HIGH(22, Control),
    ENCLS_EXITING_BITMAP = VMCS_COMPONENT_64_FULL(23, Control),
    ENCLS_EXITING_BITMAP_HIGH = VMCS_COMPONENT_64_HIGH(23, Control),
    SUB_PAGE_PERMISSION_TABLE_PTR = VMCS_COMPONENT_64_FULL(24, Control),
    SUB_PAGE_PERMISSION_TABLE_PTR_HIGH = VMCS_COMPONENT_64_HIGH(24, Control),
    TSC_MULTIPLIER = VMCS_COMPONENT_64_FULL(25, Control),
    TSC_MULTIPLIER_HIGH = VMCS_COMPONENT_64_HIGH(25, Control),

    // 64-Bit Read-Only Data Field
    GUEST_PHYSICAL_ADDR = VMCS_COMPONENT_64_FULL(0, VmExitInfo),
    GUEST_PHYSICAL_ADDR_HIGH = VMCS_COMPONENT_64_HIGH(0, VmExitInfo),

    // 64-Bit Guest-State Fields
    VMCS_LINK_POINTER = VMCS_COMPONENT_64_FULL(0, GuestState),
    VMCS_LINK_POINTER_HIGH = VMCS_COMPONENT_64_HIGH(0, GuestState),
    GUEST_IA32_DEBUGCTL = VMCS_COMPONENT_64_FULL(1, GuestState),
    GUEST_IA32_DEBUGCTL_HIGH = VMCS_COMPONENT_64_HIGH(1, GuestState),
    GUEST_IA32_PAT = VMCS_COMPONENT_64_FULL(2, GuestState),
    GUEST_IA32_PAT_HIGH = VMCS_COMPONENT_64_HIGH(2, GuestState),
    GUEST_IA32_EFER = VMCS_COMPONENT_64_FULL(3, GuestState),
    GUEST_IA32_EFER_HIGH = VMCS_COMPONENT_64_HIGH(3, GuestState),
    GUEST_IA32_PERF_GLOBAL_CTRL = VMCS_COMPONENT_64_FULL(4, GuestState),
    GUEST_IA32_PERF_GLOBAL_CTRL_HIGH = VMCS_COMPONENT_64_HIGH(4, GuestState),
    GUEST_PDPTE0 = VMCS_COMPONENT_64_FULL(5, GuestState),
    GUEST_PDPTE0_HIGH = VMCS_COMPONENT_64_HIGH(5, GuestState),
    GUEST_PDPTE1 = VMCS_COMPONENT_64_FULL(6, GuestState),
    GUEST_PDPTE1_HIGH = VMCS_COMPONENT_64_HIGH(6, GuestState),
    GUEST_PDPTE2 = VMCS_COMPONENT_64_FULL(7, GuestState),
    GUEST_PDPTE2_HIGH = VMCS_COMPONENT_64_HIGH(7, GuestState),
    GUEST_PDPTE3 = VMCS_COMPONENT_64_FULL(8, GuestState),
    GUEST_PDPTE3_HIGH = VMCS_COMPONENT_64_HIGH(8, GuestState),
    GUEST_IA32_BNDCFGS = VMCS_COMPONENT_64_FULL(9, GuestState),
    GUEST_IA32_BNDCFGS_HIGH = VMCS_COMPONENT_64_HIGH(9, GuestState),
    GUEST_IA32_RtitCtl = VMCS_COMPONENT_64_FULL(10, GuestState),
    GUEST_IA32_RtitCtl_HIGH = VMCS_COMPONENT_64_HIGH(10, GuestState),
    
    // 64-Bit Host-State Fields
    HOST_IA32_PAT = VMCS_COMPONENT_64_FULL(0, HostState),
    HOST_IA32_PAT_HIGH = VMCS_COMPONENT_64_HIGH(0, HostState),
    HOST_IA32_EFER = VMCS_COMPONENT_64_FULL(1, HostState),
    HOST_IA32_EFER_HIGH = VMCS_COMPONENT_64_HIGH(1, HostState),
    HOST_IA32_PERF_GLOBAL_CTRL = VMCS_COMPONENT_64_FULL(2, HostState),
    HOST_IA32_PERF_GLOBAL_CTRL_HIGH = VMCS_COMPONENT_64_HIGH(2, HostState),

    // *** NATURAL-WIDTH FIELDS ***
    // Natural-Width Control Fields
    CR0_GUEST_HOST_MASK = VMCS_ENCODE_FULL(0, Control, Natural),
    CR4_GUEST_HOST_MASK = VMCS_ENCODE_FULL(1, Control, Natural),
    CR0_READ_SHADOW = VMCS_ENCODE_FULL(2, Control, Natural),
    CR4_READ_SHADOW = VMCS_ENCODE_FULL(3, Control, Natural),
    CR3_TARGET_VALUE_0 = VMCS_ENCODE_FULL(4, Control, Natural),
    CR3_TARGET_VALUE_1 = VMCS_ENCODE_FULL(5, Control, Natural),
    CR3_TARGET_VALUE_2 = VMCS_ENCODE_FULL(5, Control, Natural),
    CR3_TARGET_VALUE_3 = VMCS_ENCODE_FULL(5, Control, Natural),

    //Natural-Width Read-Only Data Fields
    EXIT_QUALIFICATION = VMCS_ENCODE_FULL(0, VmExitInfo, Natural),
    IO_RCX = VMCS_ENCODE_FULL(1, VmExitInfo, Natural),
    IO_RSI = VMCS_ENCODE_FULL(2, VmExitInfo, Natural),
    IO_RDI = VMCS_ENCODE_FULL(3, VmExitInfo, Natural),
    IO_RIP = VMCS_ENCODE_FULL(4, VmExitInfo, Natural),
    GUEST_LINEAR_ADDR = VMCS_ENCODE_FULL(5, VmExitInfo, Natural),

    // Natural-Width Guest-State Fields
    GUEST_CR0 = VMCS_ENCODE_FULL(0, GuestState, Natural),
    GUEST_CR3 = VMCS_ENCODE_FULL(1, GuestState, Natural),
    GUEST_CR4 = VMCS_ENCODE_FULL(2, GuestState, Natural),
    GUEST_ES_BASE = VMCS_ENCODE_FULL(3, GuestState, Natural),
    GUEST_CS_BASE = VMCS_ENCODE_FULL(4, GuestState, Natural),
    GUEST_SS_BASE = VMCS_ENCODE_FULL(5, GuestState, Natural),
    GUEST_DS_BASE = VMCS_ENCODE_FULL(6, GuestState, Natural),
    GUEST_FS_BASE = VMCS_ENCODE_FULL(7, GuestState, Natural),
    GUEST_GS_BASE = VMCS_ENCODE_FULL(8, GuestState, Natural),
    GUEST_LDTR_BASE = VMCS_ENCODE_FULL(9, GuestState, Natural),
    GUEST_TR_BASE = VMCS_ENCODE_FULL(10, GuestState, Natural),
    GUEST_GDTR_BASE = VMCS_ENCODE_FULL(11, GuestState, Natural),
    GUEST_IDTR_BASE = VMCS_ENCODE_FULL(12, GuestState, Natural),
    GUEST_DR7 = VMCS_ENCODE_FULL(13, GuestState, Natural),
    GUEST_RSP = VMCS_ENCODE_FULL(14, GuestState, Natural),
    GUEST_RIP = VMCS_ENCODE_FULL(15, GuestState, Natural),
    GUEST_RFLAGS = VMCS_ENCODE_FULL(16, GuestState, Natural),
    GUEST_PENDING_DEBUG_EXCEPTIONS = VMCS_ENCODE_FULL(17, GuestState, Natural),
    GUEST_IA32_SYSENTER_ESP = VMCS_ENCODE_FULL(18, GuestState, Natural),
    GUEST_IA32_SYSENTER_EIP = VMCS_ENCODE_FULL(19, GuestState, Natural),
    GUEST_IA32CET = VMCS_ENCODE_FULL(20, GuestState, Natural),
    GUEST_SSP = VMCS_ENCODE_FULL(21, GuestState, Natural),
    GUEST_IA32InterruptSSPTableAddr = VMCS_ENCODE_FULL(22, GuestState, Natural),

    // Natural-Width Host-State Fields
    HOST_CR0 = VMCS_ENCODE_FULL(0, HostState, Natural),
    HOST_CR3 = VMCS_ENCODE_FULL(1, HostState, Natural),
    HOST_CR4 = VMCS_ENCODE_FULL(2, HostState, Natural),
    HOST_FS_BASE = VMCS_ENCODE_FULL(3, HostState, Natural),
    HOST_GS_BASE = VMCS_ENCODE_FULL(4, HostState, Natural),
    HOST_TR_BASE = VMCS_ENCODE_FULL(5, HostState, Natural),
    HOST_GDTR_BASE = VMCS_ENCODE_FULL(6, HostState, Natural),
    HOST_IDTR_BASE = VMCS_ENCODE_FULL(7, HostState, Natural),
    HOST_IA32_SYSENTER_ESP = VMCS_ENCODE_FULL(8, HostState, Natural),
    HOST_IA32_SYSENTER_EIP = VMCS_ENCODE_FULL(9, HostState, Natural),
    HOST_RSP = VMCS_ENCODE_FULL(10, HostState, Natural),
    HOST_RIP = VMCS_ENCODE_FULL(11, HostState, Natural),
    HOST_IA32_CET = VMCS_ENCODE_FULL(12, HostState, Natural),
    HOST_SSP = VMCS_ENCODE_FULL(13, HostState, Natural),
    HostIA32InterruptSSPTableAddr = VMCS_ENCODE_FULL(14, HostState, Natural)
} VMCS_FIELDS;
